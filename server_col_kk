






server_col <- function(data_file="test_data.txt", metadata_file="test_metadata.txt", metadata_column_id=1, debug=FALSE){

    ### Source libraries, web hosted functions etc. 
    library(shiny)

    ### Import data and metadata
    data <- import_data(data_file)
    metadata <- import_metadata(metadata_file)

    ### Create colors for the plot
    # Create a single column frame of colors from the selected metadta column
    metadata_column <- metadata[ , metadata_column_id, drop=FALSE ]
    color_dataframe <- create_colors(metadata_column)  # , color_mode = "auto")
    # Single color for each column in the selected metadata column
    column_levels <- levels(as.factor(as.matrix(metadata_column))) 
    color_levels <- col.wheel(length(column_levels))
    #names(column_levels) <- color_levels
    col_vector <- vector(mode="character", length=nrow(metadata_column))
    for( i in 1:nrow(metadata_column) ){
        col_vector[i] <- color_levels[ metadata_column[,1][i] ]
    }

    ### Calculate raw PCoA
    calculate_pco(file_in=data, input_type="r_matrix", dist_method = "euclidean")

    ### Import 
    eigen_vectors
    eigen_values

    
    
    
}



data = read.table("RPKM_TCGA_LUNG.txt", header=1)
data_frame = data.frame(data)
data_log = log2(data_frame+0.0000000001)
data_trans = t(data_log)
temp = lapply(data.frame(data_trans), var)
w = which(temp==0)
data_trans = data_log[-w, ]
pc = prcomp(t(data_trans), scale=T)
x = pc$x
matrix = x[,1:3]
matrix = data.frame(matrix)
luad = which(grepl("LUAD", rownames(matrix)))
lusc = which(grepl("LUSC", rownames(matrix)))
korea = which(grepl("LC", rownames(matrix)))
cols = rep("blue", length(rownames(matrix)))
cols[luad] = "blue"
cols[lusc] = "red"
cols[korea] = "green"

shinyServer(function(input, output) {
  output$distPlot <- renderPlot({
plot(matrix$PC1, matrix$PC2, col=cols, xlab="Principal Component 1", ylab = "Principal Component 2")

  })
})



metadata_column <- metadata_column[ sample_names,,drop=FALSE ] # order the metadata by sample 1d
    #metadata_column <- metadata_column[ order(rownames(metadata_column)),,drop=FALSE ] # order the metadata by value
    color_column <- create_colors(metadata_column, color_mode = "auto")

    column_levels <- levels(as.factor(as.matrix(metadata_column))) 
    num_levels <- length(column_levels)
    color_levels <- col.wheel(num_levels)
ncol.color_matrix <- 1


######################
# SUB( ): Simple import.table wrapper
# see: https://github.com/DrOppenheimer/CDIS_GEUVADIS_analysis/blob/master/import_data.r
######################
import_data <- function(file_name)
{
  data.matrix(read.table(file_name, row.names=1, header=TRUE, sep="\t", comment.char="", quote="", check.names=FALSE))
}
######################
######################


######################
# SUB( ): Automtically generate colors from metadata with identical text or values
######################
create_colors <- function(metadata_column){ #, color_mode = "auto"){ # function to     
  my_data.color <- data.frame(metadata_column)
  column_factors <- as.factor(metadata_column[,1])
  column_levels <- levels(as.factor(metadata_column[,1]))
  num_levels <- length(column_levels)
  color_levels <- col.wheel(num_levels)
  levels(column_factors) <- color_levels
  my_data.color[,1]<-as.character(column_factors)
  
  return(my_data.color)
}
######################
######################


######################
# SUB( ): The inverse function to col2rgb()
# adapted from https://stat.ethz.ch/pipermail/r-help/2002-May/022037.html
######################
rgb2col <- function(rgb) {
  rgb <- as.integer(rgb)
  class(rgb) <- "hexmode"
  rgb <- as.character(rgb)
  rgb <- matrix(rgb, nrow=3)
  paste("#", apply(rgb, MARGIN=2, FUN=paste, collapse=""), sep="")
}
######################
######################


######################
# SUB( ): Create optimal contrast color selection using a color wheel
# adapted from https://stat.ethz.ch/pipermail/r-help/2002-May/022037.html 
######################
col.wheel <- function(num_col, my_cex=0.75) {
  cols <- rainbow(num_col) # In the future, extend the pallet, or curate colors from all pallettes to get a comprehensivve list that can be used together
  col_names <- vector(mode="list", length=num_col)
  for (i in 1:num_col){
    col_names[i] <- getColorTable(cols[i])
  }
  cols
}
######################
######################


######################
# SUB(10): Convert all colors into format "#rrggbb"
# adapted from https://stat.ethz.ch/pipermail/r-help/2002-May/022037.html
######################
getColorTable <- function(col) {
  rgb <- col2rgb(col);
  col <- rgb2col(rgb);
  sort(unique(col))
}
######################
######################


######################
# SUB( ): Simple flat data export function
# see: https://github.com/DrOppenheimer/CDIS_GEUVADIS_analysis/blob/master/export_data.r
######################
export_data <- function(data_object, file_name){
  write.table(data_object, file=file_name, sep="\t", col.names = NA, row.names = TRUE, quote = FALSE, eol="\n")
}
######################
######################


######################
# SUB( ): Function to import metadata -- preserves strings as strings
# see: https://github.com/DrOppenheimer/CDIS_GEUVADIS_analysis/blob/master/import_metadata.r
######################
import_metadata <- function(group_table, group_column, sample_names){
    metadata_matrix <- as.matrix( # Load the metadata table (same if you use one or all columns)
        read.table(
            file=group_table,row.names=1,header=TRUE,sep="\t",
            colClasses = "character", check.names=FALSE,
            comment.char = "",quote="",fill=TRUE,blank.lines.skip=FALSE
        )
    )   
 }
######################
######################








######################
# SUB( ): Calculate PCoA - multiple options (supported metrics etc)
# see: https://github.com/DrOppenheimer/CDIS_GEUVADIS_analysis/blob/master/calculate_pco.r
######################
calculate_pco <- function(
                            file_in,
                            input_dir = "./",
                            input_type = "file",
                            output_PCoA_dir = "./",
                            print_dist = 1,
                            output_DIST_dir = "./",
                            dist_method = "euclidean",
                            headers = 1,
                            debug=FALSE
                            )

{
  # load packages
  suppressPackageStartupMessages(library(matlab))      
  suppressPackageStartupMessages(library(ecodist))
  #suppressPackageStartupMessages(library(Cairo))
  #suppressPackageStartupMessages(library(gplots))

  # define sub functions
  func_usage <- function() {
    writeLines("
     You supplied no arguments
     DESCRIPTION: (calculate_pco.r):
     This script will perform a PCoA analysis on the inputdata
     using the selected distance metric.  Output always produces a
     *.PCoA file that has the normalized eigenvalues (top n lines)
     and eigenvectors (bottom n x m matris, n lines) where n is the
     number of variables (e.g.subsystems), and m the number of
     samples. You can also choose to produce *.DIST files that contain
     the distance matrix used to generate the PCoA.
     USAGE: plot_pca(
                            file_in = no default arg                               # (string)  input data file
                            input_type = \"file\"                                   # (string) file or r_matrix
                            input_dir = \"./\"                                       # (string)  directory(path) of input
                            output_PCoA_dir = \"./\"                                 # (string)  directory(path) for output PCoA file
                            print_dist = 0                                         # (boolean) print the DIST file (distance matrix)
                            output_DIST_dir = \"./\"                                 # (string)  directory(path) for output DIST file 
                            dist_method = \"bray-curtis\"                            # (string)  distance/dissimilarity metric,
                                          (choose from one of the following options)
                                          \"euclidean\" | \"maximum\"     | \"canberra\"    |
                                          \"binary\"    | \"minkowski\"   | \"bray-curtis\" |
                                          \"jacccard\"  | \"mahalanobis\" | \"sorensen\"    |
                                          \"difference\"| \"manhattan\"
                            headers = 0                                            # (booealan) print headers in output PCoA file 
                            )\n"
               )
    stop("calculate_pco stopped\n\n")
  }
  
  find_dist <- function(my_data, dist_method)
    {
      switch(dist_method,
             "euclidean" = dist(my_data, method = "euclidean"), 
             "maximum" = dist(my_data, method = "maximum"),
             "manhattan" = dist(my_data, method = "manhattan"),
             "canberra" = dist(my_data, method = "canberra"),
             "binary" = dist(my_data, method = "binary"),
             "minkowski" = dist(my_data, method = "minkowski"),
             
             #"bray-curtis" = distance(my_data, method = "bray-curtis"), # could not handle large data 1-12-12
             
             "bray-curtis" = bcdist(my_data), # 1-12-12
             #"bray-curtis" = vegdist(my_data, method="bray"), # 1-12-12
             #"bray-curtis" = designdist(my_data, method = "(A+B-2*J)/(A+B)") # 1-12-12
             
             "jaccard" = distance(my_data, method = "jaccard"),
             "mahalanobis" = distance(my_data, method = "mahalanobis"),
             "sorensen" = distance(my_data, method = "sorensen"),
             "difference" = distance(my_data, method = "difference")
             # unifrac
             # weighted_unifrac

             # distance methods with {stats}dist: dist(x, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
             #      euclidean maximum manhattan canberra binary minkowski

             # distance methods with {ecodist}distance: distance(x, method = "euclidean")
             #      euclidean bray-curtis manhattan mahalanobis jaccard "simple difference" sorensen

             )
    }


  # stop and give the usage if the proper number of arguments is not given
  if ( nargs() == 0 ){
    func_usage()
  }

  # load data  
  if( debug==TRUE ){print("MADE IT HERE 1")}
  
  if ( identical(input_type, "file") ){
    if( debug==TRUE ){print("MADE IT HERE 2a")}
    input_data_path = gsub(" ", "", paste(input_dir, file_in))
    my_data <<- flipud(rot90(data.matrix(read.table(input_data_path, row.names=1, check.names=FALSE, header=TRUE, sep="\t", comment.char="", quote=""))))
  } else if ( identical(input_type, "r_matrix") ) {
    if( debug==TRUE ){print("MADE IT HERE 2.b")}
    my_data <<- flipud(rot90(file_in))
  } else {
    if( debug==TRUE ){print("MADE IT HERE 2.c")}
    stop("input_type value is not valid, must be file or r_matrix")
  }
  
  if( debug==TRUE ){print("MADE IT HERE 3")}
  
  
  num_data_rows = dim(my_data)[1] # substitute 0 for NA's if they exist in the data
  num_data_cols = dim(my_data)[2]
  for (row_num in (1:num_data_rows)){
    for (col_num in (1:num_data_cols)){
      #my_data[row_num, col_num] = as.integer(my_data[row_num, col_num]) # added 1-12-12 to fix "Error in vector("double", length) : vector size cannot be NA ...
      if (is.na(my_data[row_num, col_num])){
        my_data[row_num, col_num] <<- 0
      }
    }
  }

  if( debug==TRUE ){print("MADE IT HERE 4")}
  
  # a bit for naming outputs
  if( identical(input_type, "r_matrix") ){
    file_in.name <- deparse(substitute(file_in))
  } else {
    file_in.name <- file_in
  }
   
  # calculate distance matrix
  dist_matrix <<- find_dist(my_data, dist_method)
  DIST_file_out <- gsub(" ", "", paste(output_DIST_dir, file_in.name, ".", dist_method, ".DIST"))
  if (print_dist > 0) { write_file(file_name = DIST_file_out, data = data.matrix(dist_matrix)) }

  if( debug==TRUE ){print("MADE IT HERE 5")}

  # perform the pco
  my_pco <<- pco(dist_matrix)

  if( debug==TRUE ){print("MADE IT HERE 6")}

  # scale eigen values from 0 to 1, and label them
  eigen_values <<- my_pco$values
  scaled_eigen_values <<- (eigen_values/sum(eigen_values))
  for (i in (1:dim(as.matrix(scaled_eigen_values))[1])) {names(scaled_eigen_values)[i]<<-gsub(" ", "", paste("PCO", i))}
  scaled_eigen_values <<- data.matrix(scaled_eigen_values)
  #for (i in (1:dim(as.matrix(scaled_ev))[1])) dimnames(scaled_ev)[i]<<-gsub(" ", "", paste("PCO", i))

  if( debug==TRUE ){print("MADE IT HERE 7")}

  # label the eigen vectors
  eigen_vectors <<- data.matrix(my_pco$vectors) 
  dimnames(eigen_vectors)[[1]] <<- dimnames(my_data)[[1]]

  if( debug==TRUE ){print("MADE IT HERE 8")}

  # write eigen values and then eigen vectors to file_out
  PCoA_file_out = gsub(" ", "", paste(output_PCoA_dir, file_in.name, ".", dist_method, ".PCoA"))

  if ( headers == 1 ){
    write(file = PCoA_file_out, paste("# file_in    :", file_in.name,
            "\n# dist_method:", dist_method,
            "\n#________________________________",
            "\n# EIGEN VALUES (scaled 0 to 1) >",
            "\n#________________________________"),
          append=FALSE)
    write.table(scaled_eigen_values, file=PCoA_file_out, col.names=FALSE, row.names=TRUE, append = TRUE, sep="\t", eol="\n")
  }else{
    write.table(scaled_eigen_values, file=PCoA_file_out, col.names=FALSE, row.names=TRUE, append = FALSE, sep="\t", eol="\n")
  }
  
  if( debug==TRUE ){print("MADE IT HERE 9")}
  
  if ( headers == 1 ){
    write(file = PCoA_file_out, paste("#________________________________",
            "\n# EIGEN VECTORS >",
            "\n#________________________________"),
          append=TRUE)
  }

  if( debug==TRUE ){print("MADE IT HERE 10")}

  #write.table(eigen_vectors, file=PCoA_file_out, col.names=FALSE, row.names=TRUE, append = TRUE, sep="\t")
  write.table(eigen_vectors, file=PCoA_file_out, col.names=FALSE, row.names=TRUE, append = TRUE, sep="\t", eol="\n")
  
  if( debug==TRUE ){print("MADE IT HERE 11")}
  
}


write_file <- function(file_name, data) {
  write.table(data, file=file_name, col.names=NA, row.names=TRUE, append = FALSE, sep="\t", quote = FALSE, eol="\n")
}

######################
######################





######################
# SUB( ): Load precalculated PCoA generated from Kevin's calculate_pcoa.r
# see: https://github.com/DrOppenheimer/CDIS_GEUVADIS_analysis/blob/master/calculate_pco.r 
######################
load_pcoa_data <- function(PCoA_in){

  #print("loading PCoA")
  
  con_1 <- file(PCoA_in)
  con_2 <- file(PCoA_in)
  # read through the first time to get the number of samples
  open(con_1);
  num_values <- 0
  data_type = "NA"
  while ( length(my_line <- readLines(con_1,n = 1, warn = FALSE)) > 0) {
    if ( length( grep("PCO", my_line) ) == 1  ){
      num_values <- num_values + 1
    }
  }
  close(con_1)
  # create object for values
  eigen_values <- matrix("", num_values, 1)
  dimnames(eigen_values)[[1]] <- 1:num_values
  eigen_vectors <- matrix("", num_values, num_values)
  dimnames(eigen_vectors)[[1]] <- 1:num_values
  # read through a second time to populate the R objects
  value_index <- 1
  vector_index <- 1
  open(con_2)
  current.line <- 1
  data_type = "NA"
  while ( length(my_line <- readLines(con_2,n = 1, warn = FALSE)) > 0) {
    if ( length( grep("#", my_line) ) == 1  ){
      if ( length( grep("EIGEN VALUES", my_line) ) == 1  ){
        data_type="eigen_values"
      } else if ( length( grep("EIGEN VECTORS", my_line) ) == 1 ){
        data_type="eigen_vectors"
      }
    }else{
      split_line <- noquote(strsplit(my_line, split="\t"))
      if ( identical(data_type, "eigen_values")==TRUE ){
        dimnames(eigen_values)[[1]][value_index] <- noquote(split_line[[1]][1])
        eigen_values[value_index,1] <- noquote(split_line[[1]][2])       
        value_index <- value_index + 1
      }
      if ( identical(data_type, "eigen_vectors")==TRUE ){
        dimnames(eigen_vectors)[[1]][vector_index] <- noquote(split_line[[1]][1])
        for (i in 2:(num_values+1)){
          eigen_vectors[vector_index, (i-1)] <- as.numeric(noquote(split_line[[1]][i]))
        }
        vector_index <- vector_index + 1
      }
    }
  }
  close(con_2)
  # finish labeling of data objects
  dimnames(eigen_values)[[2]] <- "EigenValues"
  dimnames(eigen_vectors)[[2]] <- dimnames(eigen_values)[[1]]
  class(eigen_values) <- "numeric"
  class(eigen_vectors) <- "numeric"
  # write imported data to global objects
  #eigen_values <<- eigen_values
  #eigen_vectors <<- eigen_vectors
  return(list(eigen_values=eigen_values, eigen_vectors=eigen_vectors))
  
}


# non optional, convert "na's" to 0
    #input_data[is.na(input_data)] <- 0

