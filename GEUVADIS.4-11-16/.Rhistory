files
details = file.info(list.files("~/R_workspaces"))
details = details[with(details, order(as.POSIXct(mtime))), ]
files = rownames(details)
print("These are the last few workspace backups - most recent first:")
if ( length(files) <= 10 ){
for ( i in length(files):1 ){
print(paste("~/R_workspacesfiles"/,[i], sep="", collapse=""))
}
}else{
for ( i in length(files):(length(files) - 9) ){
print(paste("~/R_workspacesfiles"/,[i], sep="", collapse=""))
}
}
details = file.info(list.files("~/R_workspaces"))
details = details[with(details, order(as.POSIXct(mtime))), ]
files = rownames(details)
print("These are the last few workspace backups - most recent first:")
if ( length(files) <= 10 ){
for ( i in length(files):1 ){
print(paste("~/R_workspacesfiles/", [i], sep="", collapse=""))
}
}else{
for ( i in length(files):(length(files) - 9) ){
print(paste("~/R_workspacesfiles/", [i], sep="", collapse=""))
}
}
details = file.info(list.files("~/R_workspaces"))
details = details[with(details, order(as.POSIXct(mtime))), ]
files = rownames(details)
print("These are the last few workspace backups - most recent first:")
if ( length(files) <= 10 ){
for ( i in length(files):1 ){
print(paste("~/R_workspacesfiles/", files[i], sep="", collapse=""))
}
}else{
for ( i in length(files):(length(files) - 9) ){
print(paste("~/R_workspacesfiles/", files[i], sep="", collapse=""))
}
}
files
details
details = file.info(list.files("~/R_workspaces"))
details
details
file.info(list.files("~/R_workspaces"))
list.files("~/R_workspaces")
file.info(list.files("~/R_workspaces/Tue_Nov_17_11:59:38_2015.RData"))
?file.info
workspace_paths_list <- paste( "~/R_workspaces/", list.files("~/R_workspaces"), sep="", collapse="")
workspace_paths_list
workspace_paths_list[i]
details = file.info(list.files("~/R_workspaces"))
class(details)
details
?list.files
list.files("~/R_workspaces")
list.files("~/R_workspaces", full.names=TRUE)
details = file.info(list.files("~/R_workspaces", full.names=TRUE))
details
details = details[with(details, order(as.POSIXct(mtime))), ]
details
size = details$size
size
qq()
ls()
?hclust
install.packages("flashClust")
library(flashClust)
help(package=flashClust)
?flashClust::hclust
?hclust
hclust
?hclust
?cor
?t
?hclust
?match
lab_v <- scan()
library(GLDEX)
histsu(lab_v)
histsu(lab_v, breaks=10)
histsu(lab_v, xlab="FDR", ylab="Frequency", braks=10)
histsu(lab_v, xlab="FDR", ylab="Frequency", breaks=10)
histsu(lab_v, xlab="FDR", ylab="Frequency", breaks=10)
histsu(lab_v, xlab="FDR", ylab="Frequency", braks=10, main="Distribution of FDR values for \"Lab\" based KW")
histsu(lab_v, xlab="FDR", ylab="Frequency", braks=20, main="Distribution of FDR values for \"Lab\" based KW")
histsu(lab_v, xlab="FDR", ylab="Frequency", braks=20, main="Distribution of FDR values for \"Lab\" based KW")
histsu(lab_v, xlab="FDR", ylab="Frequency", breaks=20, main="Distribution of FDR values for \"Lab\" based KW")
abline(v=0.05, col="red", lwd=10)
?abline
histsu(lab_v, xlab="FDR", ylab="Frequency", breaks=20, main="Distribution of FDR values for \"Lab\" based KW", abline(v=0.05, col="red", lwd=10))
abline(v=0.05)
pdf(file="lab.fdr_dist.hist.pdf", width=11, height=8.5)
histsu(lab_v, xlab="FDR", ylab="Frequency", breaks=20, main="Distribution of FDR values for \"Lab\" based KW")
abline(v=0.05, col="red", lwd=10)
getwd()
dev.off()
pdf(file="lab.fdr_dist.hist.pdf", width=11, height=8.5)
histsu(lab_v, xlab="FDR", ylab="Frequency", breaks=20, main="Distribution of FDR values for \"Lab\" based KW")
abline(v=5e-02, col="red", lwd=10)
dev.off()
pdf(file="lab.fdr_dist.hist.pdf", width=11, height=8.5)
histsu(lab_v, xlab="FDR", ylab="Frequency", breaks=20, main="Distribution of FDR values for \"Lab\" based KW")
abline(v=5e-02, col="red", lwd=10)
abline(h=20, col="red")
dev.off()
pdf(file="lab.fdr_dist.hist.pdf", width=11, height=8.5)
histsu(lab_v, xlab="FDR", ylab="Frequency", breaks=20, main="Distribution of FDR values for \"Lab\" based KW")
abline(v=5.0e-02, col="red", lwd=10)
dev.off()
pdf(file="lab.fdr_dist.hist.pdf", width=11, height=8.5)
histsu(lab_v, xlab="FDR", ylab="Frequency", breaks=20, main="Distribution of FDR values for \"Lab\" based KW")
abline(v=5.0e-14, col="red", lwd=10)
dev.off()
pdf(file="lab.fdr_dist.hist.pdf", width=11, height=8.5)
histsu(lab_v, xlab="FDR", ylab="Frequency", breaks=20, main="Distribution of FDR values for \"Lab\" based KW")
#abline(v=5.0e-14, col="red", lwd=10)
abline(v=0, col="red", lwd=10)
dev.off()
pdf(file="lab.fdr_dist.hist.pdf", width=11, height=8.5)
histsu(lab_v, xlab="FDR", ylab="Frequency", breaks=20, main="Distribution of FDR values for \"Lab\" based KW")
#abline(v=5.0e-14, col="red", lwd=10)
#abline(v=0, col="red", lwd=10)
abline(v=0.05, col="red", lwd=10)
dev.off()
pdf(file="lab.fdr_dist.hist.pdf", width=11, height=8.5)
histsu(lab_v, xlab="FDR", ylab="Frequency", breaks=20, main="Distribution of FDR values for \"Lab\" based KW")
#abline(v=5.0e-14, col="red", lwd=10)
#abline(v=0, col="red", lwd=10)
abline(v=0.05, col="red")
dev.off()
?cbind2
test1 <- matrix(4,4,4)
test2 <- matrix(3,4,4)
test1
test2
rownames(test1) <- c("row1", "row2", "row3", "row5")
rownames(test2) <- c("row1", "row2", "row3", "row4")
colnames(test1) <- c("col1","col2","col3","col4")
colnames(test2) <- c("col4","col6","col7","col8")
test3 <- rbind2(test1, test2)
test3
?rbind2
test3 <- rBind(test1, test2)
install.packages("Matrix")
library(Matrix)
test3 <- rBind(test1, test2)
test3
test3 <- cbind2(test1, test2)
test3
test3 <- cBind(test1, test2)
test3
?rbind
test3 <- cbind(test1, test2[, "symbol"][match(rownames(t), rownames(z))])
test3 <- cbind(test1, test2[match(rownames(test1), rownames(test2))])
test3
test1
test2
test3 <- cbind(test1, test2[match(rownames(test1), rownames(test2))])
test3
test3 <- merge(test1, test2, by="row.names", all=TRUE)
test3
colnames(test1)
test5 <- test1
test5
test5[ test5=4 ] <- 0
test5
combine_matrices <- function(matrix1, matrix2){
comb_matrix<- merge(matrix1, matrix2, by="row.names", all=TRUE) # This does not handle metadata yet
rownames(comb_matrix) <- comb_matrix$Row.names
comb_matrix$Row.names <- NULL
colnames(comb_matrix) <- c(colnames(matrix1), colnames(matrix2))
pseudo_count <- min(comb_matrix)/10000
comb_matrix[is.na(comb_matrix)] <- pseudoc_count
return(comb_matric)
}
test5 <- combine_matrices(test1, test2)
combine_matrices <- function(matrix1, matrix2){
comb_matrix<- merge(matrix1, matrix2, by="row.names", all=TRUE) # This does not handle metadata yet
rownames(comb_matrix) <- comb_matrix$Row.names
comb_matrix$Row.names <- NULL
colnames(comb_matrix) <- c(colnames(matrix1), colnames(matrix2))
pseudo_count <- min(comb_matrix)/10000
comb_matrix[is.na(comb_matrix)] <- pseudo_count
return(comb_matric)
}
test5 <- combine_matrices(test1, test2)
combine_matrices <- function(matrix1, matrix2){
comb_matrix<- merge(matrix1, matrix2, by="row.names", all=TRUE) # This does not handle metadata yet
rownames(comb_matrix) <- comb_matrix$Row.names
comb_matrix$Row.names <- NULL
colnames(comb_matrix) <- c(colnames(matrix1), colnames(matrix2))
pseudo_count <- min(comb_matrix)/10000
comb_matrix[is.na(comb_matrix)] <- pseudo_count
return(comb_matrix)
}
test5 <- combine_matrices(test1, test2)
test5
min(test5)
?min
combine_matrices <- function(matrix1, matrix2){
comb_matrix<- merge(matrix1, matrix2, by="row.names", all=TRUE) # This does not handle metadata yet
rownames(comb_matrix) <- comb_matrix$Row.names
comb_matrix$Row.names <- NULL
colnames(comb_matrix) <- c(colnames(matrix1), colnames(matrix2))
pseudo_count <- min(comb_matrix, na.rm=TRUE)/10000
comb_matrix[is.na(comb_matrix)] <- pseudo_count
return(comb_matrix)
}
test5
combine_matrices <- function(matrix1, matrix2){
comb_matrix<- merge(matrix1, matrix2, by="row.names", all=TRUE) # This does not handle metadata yet
rownames(comb_matrix) <- comb_matrix$Row.names
comb_matrix$Row.names <- NULL
colnames(comb_matrix) <- c(colnames(matrix1), colnames(matrix2))
pseudo_count <- min(comb_matrix, na.rm=TRUE)/10000
comb_matrix[is.na(comb_matrix)] <- pseudo_count
return(comb_matrix)
}
test5 <- combine_matrices(test1, test2)
test5
combine_matrices <- function(matrix1, matrix2, pseudo_fudge=10000, order_rows=TRUE, order_columns=TRUE){
# perform the merge
comb_matrix<- merge(matrix1, matrix2, by="row.names", all=TRUE)
# undo garbage formatting that merge introduces
rownames(comb_matrix) <- comb_matrix$Row.names
comb_matrix$Row.names <- NULL
colnames(comb_matrix) <- c(colnames(matrix1), colnames(matrix2))
pseudo_count <- min(comb_matrix, na.rm=TRUE)/pseudo_fudge # find the min real value; that num/pseudo_fudge = pseudo_count value
comb_matrix[is.na(comb_matrix)] <- pseudo_count # replace NA with pseudo_count
# order columns
if( order_rows==TRUE){
ordered_rownames <- order(rownames(comb_matrix))
comb_matrix <- comb_matrix[ordered_rownames,]
}
# order rows
if( order_columns==TRUE){
ordered_colnames <- order(colnames(comb_matrix))
comb_matrix <- comb_matrix[,ordered_colnames]
}
return(comb_matrix)
}
test5 <- combine_matrices(test1, test2)
test5
test1
test2
setwd("~/git/Shiny_fun/GEUVADIS/GEUVADIS.2-2-16")
setwd("/Users/kevin/git/Shiny_fun/GEUVADIS.2-2-16")
setwd("~/git/Shiny_fun/GEUVADIS.2-2-16")
runApp("./")
setwd("~/git/Shiny_fun/GEUVADIS.2-2-16")
runApp("./")
